# -*- coding: utf-8 -*-

# Дана геномная последовательность. Вывести, сколько раз в ней встречаеться нуклеотид
# цитозин (C).
# Входные данные: CACCTGGAC
# Выходные данные: 5
# Входные данные: GATTACA
# Выходные данные: 1

# Вариант 1
# a = input()
# count = 0
# for i in a:
#     if i == 'C':
#         count += 1
# print(count)

# Вариант 2
# a = input()
# print(a.count('C'))

# GC-состав является важной характеристикой геномных последовательностей и определяется
# как процентное соотношение суммы всех гуанинов и цитозинов к общему числу нуклеиновых
# оснований в геномной последовательности.
# Напишите программу, которая вычисляет процентное содержание символов
# G (гуанин) и C (цитозин) в введенной строке (программа не должна зависеть от регистра
# вводимых символов).
# Например, в строке "acggtgttat" процентное содержание символов G и C
# равно (4/10) * 100 = 40.0 , где 4 -- это количество символов G и C,
# а 10 -- это длина строки.
# Sample Input:acggtgttat
# Sample Output: 40.0

# a = input()
# b = (a.upper().count('g'.upper()))
# c = (a.upper().count('c'.upper()))
# d = ((b + c)/len(a)) * 100
# print(d)



# Дана геномная последовательность. Проверить являеться ли она полиндромом
#(строка является полиндромом, если читается в обоих направлениях одинаково)
#Проверка:
# Входные данные: CAGGTGGAC Выходные данные: Yes
# Входные данные: GATTACA Выходные данные: No

# Вариант 1
# a = input()
# b = a[::-1]
# if a == b:
#     print('Yes')
# else:
#     print('No')

# Вариант 2
# s = input()
# i = 0
# j = len(s)-1
# is_palindrom = True
# while i < j:
#     if s[i] != s[j]:
#         is_palindrom = False
#         break
#     i += 1
#     j -= 1
# if is_palindrom == True:
#     print('Yes')
# else:
#     print('No')

# Узнав, что ДНК не является случайной строкой, только что поступившие в Институт
# биоинформатики студенты группы информатиков предложили использовать алгоритм сжатия,
# который сжимает повторяющиеся символы в строке.
# Кодирование осуществляется следующим образом:
# s = 'aaaabbсaa' преобразуется в 'a4b2с1a2', то есть группы одинаковых символов исходной
# строки заменяются на этот символ и количество его повторений в этой позиции строки.
# Напишите программу, которая считывает строку, кодирует её предложенным алгоритмом и
# выводит закодированную последовательность на стандартный вывод.
# Кодирование должно учитывать регистр символов.
# Проверка:
# Sample Input 1: aaaabbcaa Sample Output 1: a4b2c1a2
# Sample Input 2: abc Sample Output 2: a1b1c1

# Вариант 1
# a = input()
# count = 1
# for i in range(1,len(a)):
#     if a[i] == a[i-1]:
#        count += 1
#     else:
#         print(a[i-1],end='')
#         print(count,end ='')
#         count = 1
# print(a[-1],end='')
# print(count)

